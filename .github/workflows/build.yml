name: build

on:
  push:
    branches: [ "main" ]

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.TOKEN_APP_ID }}
          private-key: ${{ secrets.TOKEN_PRIVATE_KEY }}

      - uses: google-github-actions/release-please-action@v4
        id: release-please
        with:
          token: ${{ steps.app-token.outputs.token }}

      - uses: actions/checkout@v4
        with:
          submodules: true

      - uses: oven-sh/setup-bun@v1
      - uses: mymindstorm/setup-emsdk@v14
        with:
          actions-cache-folder: .emsdk-cache
      - uses: seanmiddleditch/gha-setup-ninja@master

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            packages/driver/node_modules
            packages/web/node_modules
          key: "${{ runner.os }}-node-modules-${{ hashFiles('bun.lockb') }}"
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install dependencies
        run: bun install --frozen-lockfile
        working-directory: packages/driver

      - name: Build
        run: bun run build
        working-directory: packages/driver

      - name: Install dependencies
        run: bun install --frozen-lockfile
        working-directory: packages/web

      - name: Build
        run: bun run build
        working-directory: packages/web

      - name: Deploy
#        if: ${{ steps.release-please.outputs.release_created }}
        run: bun run deploy
        working-directory: packages/web
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
